var documenterSearchIndex = {"docs":
[{"location":"api.html#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api.html","page":"API Reference","title":"API Reference","text":"ProtocolDataUnits.PDU\nProtocolDataUnits.byteorder\nBase.length(::Type{<:PDU}, ::Val{Symbol}, ProtocolDataUnits.PDUInfo)\nProtocolDataUnits.PDUInfo\nBase.read(io::IO, ::Type{<:PDU})\nBase.write(io::IO, ::PDU)\nBase.Vector{UInt8}(::PDU)","category":"page"},{"location":"api.html#ProtocolDataUnits.PDU","page":"API Reference","title":"ProtocolDataUnits.PDU","text":"Parent data type for all PDUs.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ProtocolDataUnits.byteorder","page":"API Reference","title":"ProtocolDataUnits.byteorder","text":"byteorder(::Type{T})\n\nByte order used for PDUs of type T. Defaults to BIG_ENDIAN. To change byte order, define a method for this function.\n\nExample:\n\nProtocolDataUnits.byteorder(::Type{MyPDU}) = LITTLE_ENDIAN\n\n\n\n\n\nbyteorder(::Type{T}, ::Val{s})\n\nByte order used for PDUs of type T for field s. Defaults to the same byte order as the PDU. To change byte order, define a method for this function.\n\nExample:\n\nProtocolDataUnits.byteorder(::Type{MyPDU}, ::Val{:myfield}) = LITTLE_ENDIAN\n\n\n\n\n\n","category":"function"},{"location":"api.html#Base.length-Tuple{Type{var\"#s1\"} where var\"#s1\"<:PDU, Val{Symbol}, Any}","page":"API Reference","title":"Base.length","text":"length(::Type{T}, ::Val{s}, info::PDUInfo)\n\nLength of field s in PDU of type T. Defaults to nothing, which indicates that the length is not known, and wire-encoding is used to store length as part of PDU. The length is specified in number of elements for vectors, and number of bytes for strings.\n\nExamples:\n\n# length of field x is 4 bytes less than length of PDU\nBase.length(::Type{MyPDU}, ::Val{:x}, info) = info.length - 4\n\n# length of field x is given by the value of field n in the PDU\nBase.length(::Type{MyPDU}, ::Val{:x}, info) = info.get(:n)\n\n\n\n\n\n","category":"method"},{"location":"api.html#ProtocolDataUnits.PDUInfo","page":"API Reference","title":"ProtocolDataUnits.PDUInfo","text":"PDU information with fields:\n\nlength: length of PDU in bytes, if known, missing otherwise\nget: function that returns value of field s in the PDU\n\n\n\n\n\n","category":"type"},{"location":"api.html#Base.read-Tuple{IO, Type{var\"#s1\"} where var\"#s1\"<:PDU}","page":"API Reference","title":"Base.read","text":"read(io::IO, T::PDU)\nread(io::IO, T::PDU; nbytes)\n\nDecodes a vector of bytes from stream io to give a PDU. If nbytes is specified, the PDU is assumed to be of length nbytes bytes.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Base.write-Tuple{IO, PDU}","page":"API Reference","title":"Base.write","text":"write(io::IO, pdu::PDU)\n\nEncodes a PDU into a vector of bytes written to stream io.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Base.Vector-Union{Tuple{PDU}, Tuple{UInt8}} where UInt8","page":"API Reference","title":"Base.Vector","text":"Vector{UInt8}(pdu::PDU)\n\nEncodes a PDU into a vector of bytes.\n\n\n\n\n\n","category":"method"},{"location":"index.html#ProtocolDataUnits.jl","page":"ProtocolDataUnits.jl","title":"ProtocolDataUnits.jl","text":"","category":"section"},{"location":"index.html","page":"ProtocolDataUnits.jl","title":"ProtocolDataUnits.jl","text":"CurrentModule = ProtocolDataUnits","category":"page"},{"location":"index.html","page":"ProtocolDataUnits.jl","title":"ProtocolDataUnits.jl","text":"TODO","category":"page"}]
}
